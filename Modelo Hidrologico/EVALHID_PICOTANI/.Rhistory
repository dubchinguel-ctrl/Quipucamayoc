"Humidity",            # texto simple
"Ash",                 # texto simple
"Ether~extract",       # usa tilde (~) para espacio en expresiones matemáticas
"Protein",
"P[avai]",             # subíndice
"EC",
"pH",
"C[T]",                # subíndice
"C[O]",                # subíndice
"M[O]",                # subíndice
"N[T]",                # subíndice
"Ca^{2+}",             # superíndice
"Mg^{2+}",             # superíndice
"Na^{+}",              # superíndice
"K^{+}",               # superíndice
"K[avai]",             # subíndice
"Sand",
"Clay",
"Silt"
)
# Agregar nombres expresados
vars$label <- var_labels
# Gráfico con ggplot2
p <- ggplot(vars, aes(x = Dim1, y = Dim2)) +
geom_segment(aes(x = 0, y = 0, xend = Dim1, yend = Dim2),
arrow = arrow(length = unit(0.25, "cm")), color = "black") +
geom_text(aes(label = label), parse = TRUE, size = 5, hjust = 0.5, vjust = -0.7) +
xlim(-1.1, 1.1) + ylim(-1.1, 1.1) +
coord_fixed() +
theme_minimal(base_size = 16) +
xlab(paste0("Dim1 (", round(res.pca$eig[1, 2], 1), "%)")) +
ylab(paste0("Dim2 (", round(res.pca$eig[2, 2], 1), "%)")) +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 14),
text = element_text(family = "Arial")
)
# Mostrar gráfico
print(p)
library(FactoMineR)
library(factoextra)
library(ggplot2)
library(grid)  # para arrow()
# Leer datos desde portapapeles (puedes cambiarlo por read.csv si lo deseas)
Datos <- read.delim("clipboard")
# Ejecutar PCA
mm <- Datos[, 1:19]
res.pca <- PCA(mm, scale.unit = TRUE, graph = FALSE)
# Extraer coordenadas de variables
vars <- as.data.frame(res.pca$var$coord[, 1:2])
colnames(vars) <- c("Dim1", "Dim2")
# Crear etiquetas con notaciÃ³n matemÃ¡tica
var_labels <- c(
"Humidity", "Ash", "Ether~extract", "Protein", "P[avai]",
"EC", "pH", "C[T]", "C[O]", "M[O]", "N[T]",
"Ca^{2+}", "Mg^{2+}", "Na^{+}", "K^{+}", "K[avai]",
"Sand", "Clay", "Silt"
)
# Verificar longitud
stopifnot(length(var_labels) == nrow(vars))
# Agregar etiquetas a la tabla
vars$label <- var_labels
# Crear grÃ¡fico PCA
p <- ggplot(vars, aes(x = Dim1, y = Dim2)) +
geom_segment(aes(x = 0, y = 0, xend = Dim1, yend = Dim2),
arrow = arrow(length = unit(0.25, "cm")), color = "black") +
geom_text(aes(label = label), parse = TRUE, size = 5, hjust = 0.5, vjust = -0.7) +
xlim(-1.1, 1.1) + ylim(-1.1, 1.1) +
coord_fixed() +
theme_minimal(base_size = 16) +
xlab(paste0("Dim1 (", round(res.pca$eig[1, 2], 1), "%)")) +
ylab(paste0("Dim2 (", round(res.pca$eig[2, 2], 1), "%)")) +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 14),
text = element_text(family = "Arial")
)
# Mostrar grÃ¡fico
print(p)
# Guardar imagen en alta resoluciÃ³n
ggsave("PCA_variables_math_labels.png", plot = p, dpi = 300, width = 9, height = 7, units = "in")
# Crear etiquetas con notaciÃ³n matemÃ¡tica
var_labels <- list(
expression(Humidity),
expression(Ash),
expression("Ether extract"),
expression(Protein),
expression(P[avai]),
expression(EC),
expression(pH),
expression(C[T]),
expression(C[O]),
expression(M[O]),
expression(N[T]),
expression(Ca^{2+}),
# Verificar longitud
stopifnot(length(var_labels) == nrow(vars))
# Crear etiquetas con notaciÃ³n matemÃ¡tica
var_labels <- list(
expression(Humidity),
expression(Ash),
expression("Ether extract"),
expression(Protein),
expression(P[avai]),
expression(EC),
expression(pH),
expression(CT),
expression(C[O]),
expression(M[O]),
expression(NT),
expression(Ca^{2+}),
library(FactoMineR)
library(factoextra)
library(ggplot2)
library(grid)
# Leer datos desde el portapapeles
Datos <- read.delim("clipboard")
# PCA sobre primeras 19 columnas
mm <- Datos[, 1:19]
res.pca <- PCA(mm, scale.unit = TRUE, graph = FALSE)
# Extraer coordenadas
vars <- as.data.frame(res.pca$var$coord[, 1:2])
colnames(vars) <- c("Dim1", "Dim2")
# Etiquetas como expresiones (sin errores de sintaxis)
var_labels <- list(
expression(Humidity),
expression(Ash),
expression("Ether extract"),
expression(Protein),
expression(P[avai]),
expression(EC),
expression(pH),
expression(C[T]),
expression(C[O]),
expression(M[O]),
expression(N[T]),
expression(Ca^{2+}),
# VerificaciÃ³n de longitud
stopifnot(length(var_labels) == nrow(vars))
vars$label <- var_labels
# Crear grÃ¡fico
p <- ggplot(vars, aes(x = Dim1, y = Dim2)) +
geom_segment(aes(x = 0, y = 0, xend = Dim1, yend = Dim2),
arrow = arrow(length = unit(0.25, "cm")), color = "black") +
geom_text(aes(label = label), size = 5, hjust = 0.5, vjust = -0.7) +
xlim(-1.1, 1.1) + ylim(-1.1, 1.1) +
coord_fixed() +
theme_minimal(base_size = 16) +
xlab(paste0("Dim1 (", round(res.pca$eig[1, 2], 1), "%)")) +
ylab(paste0("Dim2 (", round(res.pca$eig[2, 2], 1), "%)")) +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 14),
text = element_text(family = "Arial")
)
# Mostrar y guardar
print(p)
Datos <- read.delim("clipboard") # Cargar datos desde un excel
attach(Datos) ## desagregar la base de datos
str(Datos)  ## revisar la estructura de la base de datos
summary(Datos)
## Análisis de compomentes principales
library(ggplot2)
library(FactoMineR)
library(factoextra)
mm <- Datos[ ,0:19]
res.pca = PCA(mm, scale.unit = TRUE, graph=F)
plot(res.pca, label = "none")
fviz_pca_var(res.pca, col.var = "black")
res.pca$eig
res.pca$var
fviz_pca_ind(res.pca, label = "none", habillage = Datos$Prov)
library(FactoMineR)
library(factoextra)
library(ggplot2)
# Cargar los datos (ajustar si usas otro método)
Datos <- read.delim("clipboard")
# Ejecutar PCA
mm <- Datos[, 1:19]
res.pca <- PCA(mm, scale.unit = TRUE, graph = FALSE)
# Extraer coordenadas de variables
vars <- res.pca$var$coord[, 1:2]
vars <- as.data.frame(vars)
colnames(vars) <- c("Dim1", "Dim2")
# Definir nombres con expresiones matemáticas
var_labels <- c(
"Humidity",            # texto simple
"Ash",                 # texto simple
"Ether~extract",       # usa tilde (~) para espacio en expresiones matemáticas
"Protein",
"P[avai]",             # subíndice
"EC",
"pH",
"C[T]",                # subíndice
"C[O]",                # subíndice
"M[O]",                # subíndice
"N[T]",                # subíndice
"Ca^{2+}",             # superíndice
"Mg^{2+}",             # superíndice
"Na^{+}",              # superíndice
"K^{+}",               # superíndice
"K[avai]",             # subíndice
"Sand",
"Clay",
"Silt"
)
# Agregar nombres expresados
vars$label <- var_labels
# Gráfico con ggplot2
p <- ggplot(vars, aes(x = Dim1, y = Dim2)) +
geom_segment(aes(x = 0, y = 0, xend = Dim1, yend = Dim2),
arrow = arrow(length = unit(0.25, "cm")), color = "black") +
geom_text(aes(label = label), parse = TRUE, size = 5, hjust = 0.5, vjust = -0.7) +
xlim(-1.1, 1.1) + ylim(-1.1, 1.1) +
coord_fixed() +
theme_minimal(base_size = 16) +
xlab(paste0("Dim1 (", round(res.pca$eig[1, 2], 1), "%)")) +
ylab(paste0("Dim2 (", round(res.pca$eig[2, 2], 1), "%)")) +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 14),
text = element_text(family = "Arial")
)
# Mostrar gráfico
print(p)
# Cargar librerías necesarias
library(ggplot2)
library(FactoMineR)
library(factoextra)
# Cargar datos desde el portapapeles
Datos <- read.delim("clipboard", stringsAsFactors = TRUE)
# Revisar estructura y resumen de los datos
str(Datos)
summary(Datos)
# Renombrar columnas para que sean más legibles (opcional si ya están bien)
colnames(Datos) <- gsub("\\.", " ", colnames(Datos))  # Reemplaza puntos por espacios
# Selección de variables numéricas (ajustar a tu caso si no son las primeras 19)
mm <- Datos[, 1:19]
colnames(Datos) <- c(
"Humidity", "Ash", "Ether extract", "Protein", "P available",
"EC", "pH", "Total Carbon", "Organic Carbon", "MO", "NT",
"Ca2+", "Mg2+", "Na+", "K+", "K available", "Sand", "Clay", "Silt"
)
# Análisis de Componentes Principales (ACP)
res.pca <- PCA(mm, scale.unit = TRUE, graph = FALSE)
# Gráfico de variables con texto negro
p <- fviz_pca_var(res.pca, col.var = "black", repel = TRUE) +
theme_minimal(base_size = 16) +
scale_x_continuous(labels = function(x) gsub("-", "\u2212", as.character(x))) +
scale_y_continuous(labels = function(x) gsub("-", "\u2212", as.character(x))) +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
text = element_text(family = "Arial")
)
# Mostrar gráfico
print(p)
# Cargar librerías necesarias
library(ggplot2)
library(FactoMineR)
library(factoextra)
# Cargar datos desde el portapapeles
Datos <- read.delim("clipboard", stringsAsFactors = TRUE)
# Revisar estructura y resumen de los datos
str(Datos)
summary(Datos)
# Renombrar columnas para que sean más legibles (opcional si ya están bien)
colnames(Datos) <- gsub("\\.", " ", colnames(Datos))  # Reemplaza puntos por espacios
# Selección de variables numéricas (ajustar a tu caso si no son las primeras 19)
mm <- Datos[, 1:19]
# Análisis de Componentes Principales (ACP)
res.pca <- PCA(mm, scale.unit = TRUE, graph = FALSE)
# Gráfico de variables con texto negro
p <- fviz_pca_var(res.pca, col.var = "black", repel = TRUE) +
theme_minimal(base_size = 16) +
scale_x_continuous(labels = function(x) gsub("-", "\u2212", as.character(x))) +
scale_y_continuous(labels = function(x) gsub("-", "\u2212", as.character(x))) +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
text = element_text(family = "Arial")
)
# Mostrar gráfico
print(p)
# Guardar imagen en 300 dpi con nombre personalizado
ggsave("PCA_variables.png", plot = p, dpi = 300, width = 8, height = 6, units = "in")
# Gráfico de variables con texto negro
p <- fviz_pca_var(res.pca, col.var = "black", repel = TRUE) +
theme_minimal(base_size = 12) +
scale_x_continuous(labels = function(x) gsub("-", "\u2212", as.character(x))) +
scale_y_continuous(labels = function(x) gsub("-", "\u2212", as.character(x))) +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
text = element_text(family = "Arial")
)
# Mostrar gráfico
print(p)
# Guardar imagen en 300 dpi con nombre personalizado
ggsave("PCA_variables.png", plot = p, dpi = 300, width = 8, height = 6, units = "in")
# Cargar librerías necesarias
library(ggplot2)
library(FactoMineR)
library(factoextra)
# Cargar datos desde el portapapeles
Datos <- read.delim("clipboard", stringsAsFactors = TRUE)
# Revisar estructura y resumen de los datos
str(Datos)
summary(Datos)
# Renombrar columnas para que sean más legibles (opcional si ya están bien)
colnames(Datos) <- gsub("\\.", " ", colnames(Datos))  # Reemplaza puntos por espacios
# Selección de variables numéricas (ajustar a tu caso si no son las primeras 19)
mm <- Datos[, 1:27]
# Análisis de Componentes Principales (ACP)
res.pca <- PCA(mm, scale.unit = TRUE, graph = FALSE)
# Gráfico de variables con texto negro
p <- fviz_pca_var(res.pca, col.var = "black", repel = TRUE) +
theme_minimal(base_size = 16) +
scale_x_continuous(labels = function(x) gsub("-", "\u2212", as.character(x))) +
scale_y_continuous(labels = function(x) gsub("-", "\u2212", as.character(x))) +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
text = element_text(family = "Arial")
)
# Mostrar gráfico
print(p)
# Cargar datos desde el portapapeles
Datos <- read.delim("clipboard", stringsAsFactors = TRUE)
# Revisar estructura y resumen de los datos
str(Datos)
summary(Datos)
# Renombrar columnas para que sean más legibles (opcional si ya están bien)
colnames(Datos) <- gsub("\\.", " ", colnames(Datos))  # Reemplaza puntos por espacios
# Selección de variables numéricas (ajustar a tu caso si no son las primeras 19)
mm <- Datos[, 1:31]
# Análisis de Componentes Principales (ACP)
res.pca <- PCA(mm, scale.unit = TRUE, graph = FALSE)
# Gráfico de variables con texto negro
p <- fviz_pca_var(res.pca, col.var = "black", repel = TRUE) +
theme_minimal(base_size = 16) +
scale_x_continuous(labels = function(x) gsub("-", "\u2212", as.character(x))) +
scale_y_continuous(labels = function(x) gsub("-", "\u2212", as.character(x))) +
theme(
axis.title = element_text(size = 18),
axis.text = element_text(size = 16),
text = element_text(family = "Arial")
)
# Mostrar gráfico
print(p)
# Guardar imagen en 300 dpi con nombre personalizado
ggsave("PCA_variables.png", plot = p, dpi = 300, width = 8, height = 6, units = "in")
setwd("E:/LEER_Pisco/SHP")
#install.packages("ncdf4")
#install.packages("raster")
#install.packages(c("sf", "terra"))
library(ncdf4)
library(raster)
Pisco.prec<- brick("PISCOPrec.nc")
library(sf)
cuenca<-st_read(dsn=".", layer = "Motupe_Parte_Baja")
plot(cuenca)
prec.cuenca.men<-extract(Pisco.prec, cuenca, fun=mean)
range(prec.cuenca.men)
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,256), ylab ="precipitación mm", xlab = "meses")
write.csv(t(prec.cuenca.men), 'Precipitacion_Motupe_Parte_Baja.CSV')
Pisco.prec<- brick("PISCOPrec.nc")
library(sf)
cuenca<-st_read(dsn=".", layer = "Motupe_Parte_Alta")
plot(cuenca)
prec.cuenca.men<-extract(Pisco.prec, cuenca, fun=mean)
range(prec.cuenca.men)
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,256), ylab ="precipitación mm", xlab = "meses")
write.csv(t(prec.cuenca.men), 'Precipitacion_Motupe_Parte_Alta.CSV')
Pisco.prec<- brick("PISCO_Tem_Max.nc")
library(sf)
cuenca<-st_read(dsn=".", layer = "Motupe_Parte_Alta")
plot(cuenca)
prec.cuenca.men<-extract(Pisco.prec, cuenca, fun=mean)
range(prec.cuenca.men)
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,256), ylab ="precipitación mm", xlab = "meses")
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,40), ylab ="precipitación mm", xlab = "meses")
write.csv(t(prec.cuenca.men), 'Tem_Max_Motupe_Parte_Alta.CSV')
cuenca<-st_read(dsn=".", layer = "Motupe_Parte_Baja")
plot(cuenca)
prec.cuenca.men<-extract(Pisco.prec, cuenca, fun=mean)
range(prec.cuenca.men)
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,40), ylab ="precipitación mm", xlab = "meses")
write.csv(t(prec.cuenca.men), 'Tem_Max_Motupe_Parte_Baja.CSV')
Pisco.prec<- brick("PISCO_Tem_Min.nc")
library(sf)
cuenca<-st_read(dsn=".", layer = "Motupe_Parte_Baja")
plot(cuenca)
prec.cuenca.men<-extract(Pisco.prec, cuenca, fun=mean)
range(prec.cuenca.men)
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,40), ylab ="precipitación mm", xlab = "meses")
write.csv(t(prec.cuenca.men), 'Tem_Min_Motupe_Parte_Baja.CSV')
Pisco.prec<- brick("PISCO_Tem_Min.nc")
library(sf)
cuenca<-st_read(dsn=".", layer = "Motupe_Parte_Alta")
plot(cuenca)
prec.cuenca.men<-extract(Pisco.prec, cuenca, fun=mean)
range(prec.cuenca.men)
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,40), ylab ="precipitación mm", xlab = "meses")
write.csv(t(prec.cuenca.men), 'Tem_Min_Motupe_Parte_Alta.CSV')
## Extraer datos de Pisco, para precipitación, temperatura y evapotranspiración
setwd("E:/EVALHID_PICOTANI")
#install.packages("ncdf4") #instalar de no tenerlos
#install.packages("raster") #instalar de no tenerlos
#install.packages(c("sf", "terra")) #instalar de no tenerlos
library(ncdf4)
library(raster)
## Obtener los datos de precipitación media por cada subcuenca
Pisco.prec<- brick("Pisco.prec.nc")
## Obtener los datos de precipitación media por cada subcuenca
Pisco.prec<- brick("PISCOPrec.nc")
library(sf)
cuenca<-st_read(dsn=".", layer = "cc_picotani_WGS84")
plot(cuenca)
prec.cuenca.men<-extract(Pisco.prec, cuenca, fun=mean)
range(prec.cuenca.men)
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,40), ylab ="precipitación mm", xlab = "meses")
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,200), ylab ="precipitación mm", xlab = "meses")
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,300), ylab ="precipitación mm", xlab = "meses")
write.csv(t(prec.cuenca.men), 'Precipitacion_Media_picotani.CSV')
## Precipitación Cuenca 682 parte alta
cuenca<-st_read(dsn=".", layer = "Cuenca_682_parte_alta")
plot(cuenca)
prec.cuenca.men<-extract(Pisco.prec, cuenca, fun=mean)
range(prec.cuenca.men)
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,300), ylab ="precipitación mm", xlab = "meses")
write.csv(t(prec.cuenca.men), 'Precipitacion_Media_682_parte_baja.CSV')
## Precipitación Cuenca 682 parte baja
cuenca<-st_read(dsn=".", layer = "Cuenca_682_parte_baja")
plot(cuenca)
prec.cuenca.men<-extract(Pisco.prec, cuenca, fun=mean)
range(prec.cuenca.men)
## Precipitación Cuenca 682 parte alta
cuenca<-st_read(dsn=".", layer = "Cuenca_682_parte_alta")
plot(cuenca)
prec.cuenca.men<-extract(Pisco.prec, cuenca, fun=mean)
range(prec.cuenca.men)
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,300), ylab ="precipitación mm", xlab = "meses")
write.csv(t(prec.cuenca.men), 'Precipitacion_Media_682_parte_alta.CSV')
## Precipitación Cuenca 682 parte baja
cuenca<-st_read(dsn=".", layer = "Cuenca_682_parte_baja")
plot(cuenca)
prec.cuenca.men<-extract(Pisco.prec, cuenca, fun=mean)
range(prec.cuenca.men)
plot(prec.cuenca.men[1,], type = "l", col="blue", ylim=c(0,300), ylab ="precipitación mm", xlab = "meses")
write.csv(t(prec.cuenca.men), 'Precipitacion_Media_682_parte_baja.CSV')
Pisco.evapo<- brick("PISCOPrec.nc")
## Precipitación Picotani
cuenca<-st_read(dsn=".", layer = "cc_picotani_WGS84")
plot(cuenca)
evapo.cuenca.men<-extract(Pisco.evapo, cuenca, fun=mean)
range(evapo.cuenca.men)
plot(evapo.cuenca.men[1,], type = "l", col="blue", ylim=c(0,300), ylab ="evapotranspiración mm", xlab = "meses")
write.csv(t(prec.cuenca.men), 'Evapotranspiración_Media_picotani.CSV')
write.csv(t(evapo.cuenca.men), 'Evapotranspiración_Media_picotani.CSV')
write.csv(t(evapo.cuenca.men), 'Evapotranspiración_Media_picotani.CSV')
## Precipitación Cuenca 682 parte alta
cuenca<-st_read(dsn=".", layer = "Cuenca_682_parte_alta")
plot(cuenca)
evapo.cuenca.men<-extract(Pisco.evapo, cuenca, fun=mean)
range(evapo.cuenca.men)
plot(evapo.cuenca.men[1,], type = "l", col="blue", ylim=c(0,300), ylab ="evapotranspiración mm", xlab = "meses")
write.csv(t(evapo.cuenca.men), 'Evapotranspiración_Media_682_parte_alta.CSV')
## Evapotranspiración potencial Cuenca 682 parte baja
cuenca<-st_read(dsn=".", layer = "Cuenca_682_parte_baja")
plot(cuenca)
evapo.cuenca.men<-extract(Pisco.evapo, cuenca, fun=mean)
range(evapo.cuenca.men)
plot(evapo.cuenca.men[1,], type = "l", col="blue", ylim=c(0,300), ylab ="precipitación mm", xlab = "meses")
write.csv(t(evapo.cuenca.men), 'Precipitacion_Media_682_parte_baja.CSV')
write.csv(t(evapo.cuenca.men), 'Evapotranspiración_Media_682_parte_baja.CSV')
## Temperatura media
Pisco.temmax<- brick("PISCO_Tem_Max.nc")
Pisco.temmin<- brick("PISCO_Tem_Min.nc")
## Precipitación Picotani
cuenca<-st_read(dsn=".", layer = "cc_picotani_WGS84")
plot(cuenca)
temmax.cuenca.men<-extract(Pisco.temmax, cuenca, fun=mean)
temmin.cuenca.men<-extract(Pisco.temmin, cuenca, fun=mean)
temprom.cuenca.mean<- (temmax.cuenca.men + temmin.cuenca.men) / 2
range(temprom.cuenca.men)
plot(temprom.cuenca.men[1,], type = "l", col="blue", ylim=c(0,300), ylab ="evapotranspiración mm", xlab = "meses")
range(temprom.cuenca.mean)
plot(temprom.cuenca.mean[1,], type = "l", col="blue", ylim=c(0,300), ylab ="evapotranspiración mm", xlab = "meses")
plot(temprom.cuenca.mean[1,], type = "l", col="blue", ylim=c(0,30), ylab ="evapotranspiración mm", xlab = "meses")
plot(temprom.cuenca.mean[1,], type = "l", col="blue", ylim=c(0,15), ylab ="evapotranspiración mm", xlab = "meses")
write.csv(t(temprom.cuenca.men), 'Temperatura_Media_picotani.CSV')
write.csv(t(temprom.cuenca.mean), 'Temperatura_Media_picotani.CSV')
## Evapotranspiración potencial Cuenca 682 parte alta
cuenca<-st_read(dsn=".", layer = "Cuenca_682_parte_alta")
plot(cuenca)
temmax.cuenca.men<-extract(Pisco.temmax, cuenca, fun=mean)
temmin.cuenca.men<-extract(Pisco.temmin, cuenca, fun=mean)
temprom.cuenca.mean<- (temmax.cuenca.men + temmin.cuenca.men) / 2
range(temprom.cuenca.mean)
plot(temprom.cuenca.mean[1,], type = "l", col="blue", ylim=c(0,15), ylab ="Temperatura °C", xlab = "meses")
write.csv(t(evapo.cuenca.mean), 'Temperatura_Media_682_parte_alta.CSV')
write.csv(t(temprom.cuenca.mean), 'Temperatura_Media_682_parte_alta.CSV')
## Evapotranspiración potencial Cuenca 682 parte baja
cuenca<-st_read(dsn=".", layer = "Cuenca_682_parte_baja")
plot(cuenca)
temmax.cuenca.men<-extract(Pisco.temmax, cuenca, fun=mean)
temmin.cuenca.men<-extract(Pisco.temmin, cuenca, fun=mean)
temprom.cuenca.mean<- (temmax.cuenca.men + temmin.cuenca.men) / 2
range(temprom.cuenca.mean)
plot(temprom.cuenca.mean[1,], type = "l", col="blue", ylim=c(0,15), ylab ="Temperatura °C", xlab = "meses")
write.csv(t(temprom.cuenca.mean), 'Temperatura_Media_682_parte_baja.CSV')
